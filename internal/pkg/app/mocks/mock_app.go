// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gapi "github.com/grafana/grafana-api-golang-client"
)

// Mockapi is a mock of api interface.
type Mockapi struct {
	ctrl     *gomock.Controller
	recorder *MockapiMockRecorder
}

// MockapiMockRecorder is the mock recorder for Mockapi.
type MockapiMockRecorder struct {
	mock *Mockapi
}

// NewMockapi creates a new mock instance.
func NewMockapi(ctrl *gomock.Controller) *Mockapi {
	mock := &Mockapi{ctrl: ctrl}
	mock.recorder = &MockapiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockapi) EXPECT() *MockapiMockRecorder {
	return m.recorder
}

// DashboardByUID mocks base method.
func (m *Mockapi) DashboardByUID(uid string) (*gapi.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardByUID", uid)
	ret0, _ := ret[0].(*gapi.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardByUID indicates an expected call of DashboardByUID.
func (mr *MockapiMockRecorder) DashboardByUID(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardByUID", reflect.TypeOf((*Mockapi)(nil).DashboardByUID), uid)
}

// Dashboards mocks base method.
func (m *Mockapi) Dashboards() ([]gapi.FolderDashboardSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dashboards")
	ret0, _ := ret[0].([]gapi.FolderDashboardSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dashboards indicates an expected call of Dashboards.
func (mr *MockapiMockRecorder) Dashboards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dashboards", reflect.TypeOf((*Mockapi)(nil).Dashboards))
}

// DashboardsByIDs mocks base method.
func (m *Mockapi) DashboardsByIDs(ids []int64) ([]gapi.FolderDashboardSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardsByIDs", ids)
	ret0, _ := ret[0].([]gapi.FolderDashboardSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardsByIDs indicates an expected call of DashboardsByIDs.
func (mr *MockapiMockRecorder) DashboardsByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardsByIDs", reflect.TypeOf((*Mockapi)(nil).DashboardsByIDs), ids)
}

// DataSources mocks base method.
func (m *Mockapi) DataSources() ([]*gapi.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSources")
	ret0, _ := ret[0].([]*gapi.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataSources indicates an expected call of DataSources.
func (mr *MockapiMockRecorder) DataSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSources", reflect.TypeOf((*Mockapi)(nil).DataSources))
}

// Folders mocks base method.
func (m *Mockapi) Folders() ([]gapi.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folders")
	ret0, _ := ret[0].([]gapi.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Folders indicates an expected call of Folders.
func (mr *MockapiMockRecorder) Folders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*Mockapi)(nil).Folders))
}

// NewAlertRule mocks base method.
func (m *Mockapi) NewAlertRule(ar *gapi.AlertRule) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAlertRule", ar)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAlertRule indicates an expected call of NewAlertRule.
func (mr *MockapiMockRecorder) NewAlertRule(ar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAlertRule", reflect.TypeOf((*Mockapi)(nil).NewAlertRule), ar)
}

// NewDashboard mocks base method.
func (m *Mockapi) NewDashboard(dashboard gapi.Dashboard) (*gapi.DashboardSaveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDashboard", dashboard)
	ret0, _ := ret[0].(*gapi.DashboardSaveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDashboard indicates an expected call of NewDashboard.
func (mr *MockapiMockRecorder) NewDashboard(dashboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDashboard", reflect.TypeOf((*Mockapi)(nil).NewDashboard), dashboard)
}

// NewDataSource mocks base method.
func (m *Mockapi) NewDataSource(s *gapi.DataSource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDataSource", s)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDataSource indicates an expected call of NewDataSource.
func (mr *MockapiMockRecorder) NewDataSource(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDataSource", reflect.TypeOf((*Mockapi)(nil).NewDataSource), s)
}

// NewFolder mocks base method.
func (m *Mockapi) NewFolder(title string, uid ...string) (gapi.Folder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{title}
	for _, a := range uid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewFolder", varargs...)
	ret0, _ := ret[0].(gapi.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFolder indicates an expected call of NewFolder.
func (mr *MockapiMockRecorder) NewFolder(title interface{}, uid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{title}, uid...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFolder", reflect.TypeOf((*Mockapi)(nil).NewFolder), varargs...)
}
